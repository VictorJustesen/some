{"ast":null,"code":"import { useState } from \"react\";\nimport { makeRequest } from \"../../axios\";\nimport \"./update.scss\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\nconst Update = ({\n  setOpenUpdate,\n  user\n}) => {\n  /*\n  const [cover, setCover] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [texts, setTexts] = useState({\n    email: user.email,\n    password: user.password,\n    name: user.name,\n    city: user.city,\n    website: user.website,\n  });\n   const upload = async (file) => {\n    console.log(file)\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      const res = await makeRequest.post(\"/upload\", formData);\n      return res.data;\n    } catch (err) {\n      console.log(err);\n    }\n  };\n   const handleChange = (e) => {\n    setTexts((prev) => ({ ...prev, [e.target.name]: [e.target.value] }));\n  };\n   const queryClient = useQueryClient();\n   const mutation = useMutation(\n    (user) => {\n      return makeRequest.put(\"/users\", user);\n    },\n    {\n      onSuccess: () => {\n        // Invalidate and refetch\n        queryClient.invalidateQueries([\"user\"]);\n      },\n    }\n  );\n   const handleClick = async (e) => {\n    e.preventDefault();\n     //TODO: find a better way to get image URL\n    \n    let coverUrl;\n    let profileUrl;\n    coverUrl = cover ? await upload(cover) : user.coverpic;\n    profileUrl = profile ? await upload(profile) : user.profilepic;\n    \n    mutation.mutate({ ...texts, coverpic: coverUrl, profilepic: profileUrl });\n    setOpenUpdate(false);\n    setCover(null);\n    setProfile(null);\n   return (\n    <div className=\"update\">\n      <div className=\"wrapper\">\n        <h1>Update Your Profile</h1>\n        <form>\n          <div className=\"files\">\n            <label htmlFor=\"cover\">\n              <span>Cover Picture</span>\n              <div className=\"imgContainer\">\n                <img\n                  src={\n                    cover\n                      ? URL.createObjectURL(cover)\n                      : \"/upload/\" + user.coverpic\n                  }\n                  alt=\"\"\n                />\n                <CloudUploadIcon className=\"icon\" />\n              </div>\n            </label>\n            <input\n              type=\"file\"\n              id=\"cover\"\n              style={{ display: \"none\" }}\n              onChange={(e) => setCover(e.target.files[0])}\n            />\n            <label htmlFor=\"profile\">\n              <span>Profile Picture</span>\n              <div className=\"imgContainer\">\n                <img\n                  src={\n                    profile\n                      ? URL.createObjectURL(profile)\n                      : \"/upload/\" + user.profilepic\n                  }\n                  alt=\"\"\n                />\n                <CloudUploadIcon className=\"icon\" />\n              </div>\n            </label>\n            <input\n              type=\"file\"\n              id=\"profile\"\n              style={{ display: \"none\" }}\n              onChange={(e) => setProfile(e.target.files[0])}\n            />\n          </div>\n          <label>Email</label>\n          <input\n            type=\"text\"\n            value={texts.email}\n            name=\"email\"\n            onChange={handleChange}\n          />\n          <label>Password</label>\n          <input\n            type=\"text\"\n            value={texts.password}\n            name=\"password\"\n            onChange={handleChange}\n          />\n          <label>Name</label>\n          <input\n            type=\"text\"\n            value={texts.name}\n            name=\"name\"\n            onChange={handleChange}\n          />\n          <label>Country / City</label>\n          <input\n            type=\"text\"\n            name=\"city\"\n            value={texts.city}\n            onChange={handleChange}\n          />\n          <label>Website</label>\n          <input\n            type=\"text\"\n            name=\"website\"\n            value={texts.website}\n            onChange={handleChange}\n          />\n          <button onClick={handleClick}>Update</button>\n        </form>\n        <button className=\"close\" onClick={() => setOpenUpdate(false)}>\n          close\n        </button>\n      </div>\n    </div>\n  );\n  };\n  }*/\n};\n_c = Update;\nexport default Update;\nvar _c;\n$RefreshReg$(_c, \"Update\");","map":{"version":3,"names":["useState","makeRequest","useMutation","useQueryClient","CloudUploadIcon","Update","setOpenUpdate","user","_c","$RefreshReg$"],"sources":["/Users/victor/Desktop/Code/Projects/some/someui/src/components/update/Update.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport { makeRequest } from \"../../axios\";\nimport \"./update.scss\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\n\nconst Update = ({ setOpenUpdate, user }) => {\n  /*\n  const [cover, setCover] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [texts, setTexts] = useState({\n    email: user.email,\n    password: user.password,\n    name: user.name,\n    city: user.city,\n    website: user.website,\n  });\n\n  const upload = async (file) => {\n    console.log(file)\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      const res = await makeRequest.post(\"/upload\", formData);\n      return res.data;\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleChange = (e) => {\n    setTexts((prev) => ({ ...prev, [e.target.name]: [e.target.value] }));\n  };\n\n  const queryClient = useQueryClient();\n\n  const mutation = useMutation(\n    (user) => {\n      return makeRequest.put(\"/users\", user);\n    },\n    {\n      onSuccess: () => {\n        // Invalidate and refetch\n        queryClient.invalidateQueries([\"user\"]);\n      },\n    }\n  );\n\n  const handleClick = async (e) => {\n    e.preventDefault();\n\n    //TODO: find a better way to get image URL\n    \n    let coverUrl;\n    let profileUrl;\n    coverUrl = cover ? await upload(cover) : user.coverpic;\n    profileUrl = profile ? await upload(profile) : user.profilepic;\n    \n    mutation.mutate({ ...texts, coverpic: coverUrl, profilepic: profileUrl });\n    setOpenUpdate(false);\n    setCover(null);\n    setProfile(null);\n\n  return (\n    <div className=\"update\">\n      <div className=\"wrapper\">\n        <h1>Update Your Profile</h1>\n        <form>\n          <div className=\"files\">\n            <label htmlFor=\"cover\">\n              <span>Cover Picture</span>\n              <div className=\"imgContainer\">\n                <img\n                  src={\n                    cover\n                      ? URL.createObjectURL(cover)\n                      : \"/upload/\" + user.coverpic\n                  }\n                  alt=\"\"\n                />\n                <CloudUploadIcon className=\"icon\" />\n              </div>\n            </label>\n            <input\n              type=\"file\"\n              id=\"cover\"\n              style={{ display: \"none\" }}\n              onChange={(e) => setCover(e.target.files[0])}\n            />\n            <label htmlFor=\"profile\">\n              <span>Profile Picture</span>\n              <div className=\"imgContainer\">\n                <img\n                  src={\n                    profile\n                      ? URL.createObjectURL(profile)\n                      : \"/upload/\" + user.profilepic\n                  }\n                  alt=\"\"\n                />\n                <CloudUploadIcon className=\"icon\" />\n              </div>\n            </label>\n            <input\n              type=\"file\"\n              id=\"profile\"\n              style={{ display: \"none\" }}\n              onChange={(e) => setProfile(e.target.files[0])}\n            />\n          </div>\n          <label>Email</label>\n          <input\n            type=\"text\"\n            value={texts.email}\n            name=\"email\"\n            onChange={handleChange}\n          />\n          <label>Password</label>\n          <input\n            type=\"text\"\n            value={texts.password}\n            name=\"password\"\n            onChange={handleChange}\n          />\n          <label>Name</label>\n          <input\n            type=\"text\"\n            value={texts.name}\n            name=\"name\"\n            onChange={handleChange}\n          />\n          <label>Country / City</label>\n          <input\n            type=\"text\"\n            name=\"city\"\n            value={texts.city}\n            onChange={handleChange}\n          />\n          <label>Website</label>\n          <input\n            type=\"text\"\n            name=\"website\"\n            value={texts.website}\n            onChange={handleChange}\n          />\n          <button onClick={handleClick}>Update</button>\n        </form>\n        <button className=\"close\" onClick={() => setOpenUpdate(false)}>\n          close\n        </button>\n      </div>\n    </div>\n  );\n};\n}*/\n}\nexport default Update;"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAO,eAAe;AACtB,SAASC,WAAW,EAAEC,cAAc,QAAQ,uBAAuB;AACnE,OAAOC,eAAe,MAAM,iCAAiC;AAE7D,MAAMC,MAAM,GAAGA,CAAC;EAAEC,aAAa;EAAEC;AAAK,CAAC,KAAK;EAC1C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5IE,CAoJD;AAAAC,EAAA,GArJKH,MAAM;AAsJZ,eAAeA,MAAM;AAAC,IAAAG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}